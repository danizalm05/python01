 
 מבוא למדעי הנתונים
								   
								   
courses.campus.gov.il

https://courses.campus.gov.il/courses/course-v1:HIT+ACD_RFP4_DataScienceIntro_HE+2022_1/courseware/c879b1b9aeb5499cbe13bcd14bc0a5a7/7bb496a7bbc540f09c927cdfefe2c783/?child=first


https://www.w3schools.com/python/pandas/pandas_csv.asp

https://labs.vocareum.com/main/main.php?m=editor&asnid=537326&stepid=537327&hideNavBar=1


json
https://labs.vocareum.com/main/main.php?m=editor&asnid=537328&stepid=537329&hideNavBar=1



Web Based API
--------------------
import json
import requests 
 
response = requests.get(url) # response = return code
response.content #  content of our, successful response:
response.headers['content-type']
response.headers
response_j = response.content.decode("utf-8")
print(response_j)# decode this byte object, then the JSON will be readable. 


response_d = json.loads(response_j) # key-value pairs. 
print(type(response_d))#<class 'dict'>
print(response_d)
response_d["iss_position"]

import pandas as pd 

df = pd.read_json(response_j)

JSON - JavaScript Object Notation
----------------------------
1. json.dumps(): convert objects into a json string. 
    
    json_string = json.dumps(Dictionary) #Converts input dictionary into  json string

2. json.loads()-  parse a valid JSON string and convert it into a Python Dictionary
    json.loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None,   
                   parse_constant=None, object_pairs_hook=None, **kw)


   employee ='{"id":"09", "name": "Nitin", "department":"Finance"}'
    employee_dict = json.loads(employee)  # Convert string to Python dict 
    print(employee_dict) 
    print(employee_dict['name'])  
	
	Output:
    {'id': '09', 'department': 'Finance', 'name': 'Nitin'}
     Nitin
	
3. json.dump()-  converts the Python objects into  \JSON formatted data into a file.
    # python object(dictionary) to be dumped
dict1 ={
    "emp1": {
        "name": "Lisa",
        "designation": "programmer",
        "age": "34",
        "salary": "54000"
    },
    "emp2": {
        "name": "Elis",
        "designation": "Trainee",
        "age": "24",
        "salary": "40000"
    },
}
  
# the json file where the output must be stored
out_file = open("myfile.json", "w")
  
json.dump(dict1, out_file, indent = 6)
  
out_file.close()


4. json.load(): read the JSON document from file a  convert the JSON String document 
   into the Python dictionary. 
   json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)
    
	print("Started Reading JSON file")
    with open("developer.json", "r") as read_file:
         print("Converting JSON encoded data into Python dictionary")
         developer = json.load(read_file)

         print("Decoded JSON Data From File")
         for key, value in developer.items():
              print(key, ":", value)
         print("Done reading json file")
	
  
df.loc: gets, or sets, the value(s) of the specified labels.

df.loc['Row_2', 'Name']       #    m[i,j]    i = 'Row_2', j= 'Name'




df.iloc[]: is primarily integer position based (from 0 to length-1 of the axis), but may also be used with a boolean arra

df.iloc[[0, 1]]:  prints first two rows.
df.iloc[:3]:     prints first 4  clomns.
df.iloc[[True, False, True]]: prints   1'st  and 3'rd  clomns.
df.iloc[lambda x: x.index % 2 == 0]:  selects the rows whose index label even.

df.iloc[0, 1]:   m[i,j]

With lists of integers.

df.iloc[[0, 2], [1, 3]]:
      b     d
0     2     4
2  2000  4000

df.iloc[1:3, 0:3]




#select rows where 'points' column is equal to 7
df[df['points'] == 7]

def load_csv(file_name):
    df = pd.read_csv(file_name)
    return(df)

file_name = 'data' + os.sep + 'flavors_of_cacao.csv'
df_cocoa = load_csv(file_name)	

def get_number_of_rows(dataframe):
    shape = dataframe.shape
    return( shape[0])
	
def get_number_of_columns(dataframe):
    shape = dataframe.shape
    return( shape[1])	
	
def get_rows_in_range(dataframe, first_row, last_row):
    return (dataframe.loc[ first_row : last_row-1: 1])	
	 
def get_columns_in_range(dataframe, first_column, last_column):
    return (dataframe.iloc  [::,first_column  :last_column:1 ]    )	 
	
def select_rows_by_cell_val(dataframe, col_name, matching_val):
     return dataframe[dataframe[col_name] == matching_val] 
	 
'''
 return   rows, for which 
    the values of some column given in the 'col_name' parameter, are 
    between the 'lower_range' and 'higher_range' (inculding lower_range and higher_range)
'''	 
def select_rows_w_vals_in_range(dataframe, col_name, lower_range, higher_range):
  
    con1 =  (dataframe[col_name] <=  higher_range)
    con2 =  (dataframe[col_name] >=  lower_range) 
    filtered_df = dataframe.loc[con1 & con2]
    return filtered_df

סולם שמי: אין משמעות לסדר(שפת אם)
(רע טוב טוב מאד)סולם סדור :יש משמעות לסדר
(טמפרטורה)סולם רווח: יש משמעות גם לסדר וגם להפרש
סולם מנה : יש משמעות לסדר הפרש  ויחס (משקל)
	
	 