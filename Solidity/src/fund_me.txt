//SPDX-License-Identifier: MIT
 
//https://github.com/PatrickAlphaC/fund_me/blob/main/FundMe.sol
// Smart contract that lets anyone deposit ETH into the contract
// Only the owner of the contract can withdraw the ETH
//pragma solidity  ^0.8.30;
pragma solidity  ^0.8.14;
// Get the latest ETH/USD price from chainlink price feed

// IMPORTANT: This contract has been updated to use the Goerli testnet
// Please see: https://docs.chain.link/docs/get-the-latest-price/
// For more information

import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";
//import "@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol";
import "@openzeppelin/contracts/utils/math/SafeCast.sol";


contract FundMe {
   
   // safe math library check uint256 for integer overflows
    using SafeCast for uint256;
  
  //mapping to store which address depositeded how much ETH
   mapping(address => uint256) public addressToAmountFunded;
   
   // array of addresses who deposited
    address[] public funders;
     //address of the owner (who deployed the contract)
    address public owner;
    // the first person to deploy the contract is
    // the owner
    constructor() public {
        owner = msg.sender;
    }


    function fund() public payable {
        // 18 digit number to be compared with donated amount
        uint256 minimumUSD = 50 * 10**18;
        //is the donated amount less than 50USD?
		// In remix   value window put write :      100000000000000000  wei
        require(
            getConversionRate(msg.value) >= minimumUSD,
            "You need to spend more ETH!"
        );
        //if not, add to mapping and funders array
        addressToAmountFunded[msg.sender] += msg.value;
        funders.push(msg.sender);
    }




     //function to get the version of the chainlink pricefeed
     // https://docs.chain.link/data-feeds/price-feeds/addresses?page=1&testnetPage=2
     // serach for ETH / USD
     // 0x694AA1769357215DE4FAC081bf1f309aDC325306
     // The above address changes all the time,so you must update it 
   function getVersion() public view returns (uint256) {
        AggregatorV3Interface priceFeed = AggregatorV3Interface(
             0x694AA1769357215DE4FAC081bf1f309aDC325306
               
        );
        return priceFeed.version();
    }

    //function to get the getPrice of the chainlink pricefeed
     // https://docs.chain.link/data-feeds/price-feeds/addresses?page=1&testnetPage=2
     // serach for ETH / USD
     // 0x694AA1769357215DE4FAC081bf1f309aDC325306
     // The above address changes all the time,so you must update it 
     // Price in US  dollar
   function getPrice() public view returns (uint256) {
        AggregatorV3Interface priceFeed = AggregatorV3Interface(
            0x694AA1769357215DE4FAC081bf1f309aDC325306
        );
        (, int256 answer, , , ) = priceFeed.latestRoundData();
        // the latestRoundData returns 5 number but we need just 'answer' 
        //so we ignore all the others
        // ETH/USD rate in 18 digit
        return uint256(answer * 10000000000);
    }
     // 1000000000
    function getConversionRate(uint256 ethAmount)
        public
        view
        returns (uint256)
    {
       uint256 ethPrice = getPrice();
        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;
        // the actual ETH/USD conversation rate, after adjusting the extra 0s.
        return ethAmountInUsd;

    }
  // onlyOwner modifer will first check the condition inside it
    // and
    // if true, withdraw function will be executed
    function withdraw()  payable  public {
	    //Change the line in your contract from: msg.sender.transfer(address(this).balance);
	    //   to the next command
         require(msg.sender==owner);
         payable(msg.sender).transfer(address(this).balance);
         
          
    }

}//FundMe